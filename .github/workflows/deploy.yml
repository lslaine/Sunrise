name: Deploy Project Backend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    if: false
    runs-on: ubuntu-latest

    permissions:
      id-token: write        # Needed for OIDC token
      contents: read         # Checkout repo code

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud via Workload Identity Federation
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }} # e.g. projects/123/locations/global/workloadIdentityPools/github/providers/github-provider
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}                     # GCP SA email to impersonate

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west4-docker.pkg.dev

      - name: Build & Push Docker Image to Artifact Registry
        run: |
          IMAGE="europe-west4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_PROJECT_NAME }}-backend/${{ secrets.GCP_PROJECT_NAME }}-backend:latest"
          docker build -t "$IMAGE" ./backend
          docker push "$IMAGE"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.GCP_PROJECT_NAME }}-backend \
            --image="europe-west4-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_PROJECT_NAME }}-backend/${{ secrets.GCP_PROJECT_NAME }}-backend:latest" \
            --region=europe-west4 \
            --platform=managed \
            --service-account=${{ secrets.GCP_PROJECT_NAME }}-cloud-run-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --quiet

      - name: Ensure GCS access
        run: gsutil ls gs://${{ secrets.GCP_PROJECT_ID }}-terraform-state

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Import Existing Resources
        working-directory: terraform
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform init

          if ! terraform state list | grep -q "google_sql_database_instance.default"; then
            terraform import google_sql_database_instance.default ${{ secrets.GCP_PROJECT_ID }}:europe-west4:${{ secrets.GCP_PROJECT_NAME }}-db
          fi

          if ! terraform state list | grep -q "google_sql_database.db"; then
            terraform import google_sql_database.db ${{ secrets.GCP_PROJECT_NAME }}-db/${{ secrets.GCP_PROJECT_NAME }}
          fi

          if ! terraform state list | grep -q "google_iam_workload_identity_pool.github_pool"; then
            terraform import google_iam_workload_identity_pool.github_pool projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool
          fi

          if ! terraform state list | grep -q "google_iam_workload_identity_pool_provider.github_provider"; then
            terraform import google_iam_workload_identity_pool_provider.github_provider projects/${{ secrets.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          fi

          if ! terraform state list | grep -q "google_service_account.github_deployer"; then
            terraform import google_service_account.github_deployer github-deployer@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          fi

          if ! terraform state list | grep -q "google_service_account.cloud_run_sa"; then
            terraform import google_service_account.cloud_run_sa ${{ secrets.GCP_PROJECT_NAME }}-cloud-run-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          fi

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve || sleep 10 && terraform apply -auto-approve
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
